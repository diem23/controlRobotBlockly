{"ast":null,"code":"import Blockly from \"blockly\";\n//import { javascriptGenerator, Order } from \"blockly/javascript\";\nimport { pythonGenerator, Order } from \"blockly/python\";\nBlockly.Blocks[\"move\"] = {\n  init: function () {\n    this.appendDummyInput(\"direction\").appendField(\"direction\").appendField(new Blockly.FieldDropdown([[\"up\", \"up\"], [\"down\", \"down\"]]), \"direction_value\");\n    this.appendDummyInput(\"distance\").appendField(\"distance\").appendField(new Blockly.FieldNumber(0), \"distance_value\");\n    this.appendDummyInput(\"distance\").appendField(\"time\").appendField(new Blockly.FieldNumber(0), \"time_value\");\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Blocks[\"rotate\"] = {\n  init: function () {\n    this.appendDummyInput(\"angle\").appendField(\"angle\").appendField(new Blockly.FieldAngle(0), \"angle_value\");\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\npythonGenerator.forBlock[\"move\"] = function (block, generator) {\n  var value_time = block.getFieldValue('time_value');\n  var value_direction = block.getFieldValue('direction_value');\n  var value_distance = block.getFieldValue('distance_value');\n  var code = 'robot.move( Direction: ' + value_direction + ', Distance: ' + value_distance + ', Time: ' + value_time + ');\\n';\n  return code;\n};\npythonGenerator.forBlock[\"rotate\"] = function (block, generator) {\n  var value_angle = block.getFieldValue('angle_value');\n  var code = 'robot.rotate( Angel: ' + value_angle + ');\\n';\n  return code;\n};","map":{"version":3,"names":["Blockly","pythonGenerator","Order","Blocks","init","appendDummyInput","appendField","FieldDropdown","FieldNumber","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","FieldAngle","forBlock","block","generator","value_time","getFieldValue","value_direction","value_distance","code","value_angle"],"sources":["/home/minhdiem/testReactBach/RobotControl/src/customBlocks/custom_Blocks.js"],"sourcesContent":["import Blockly from \"blockly\";\n//import { javascriptGenerator, Order } from \"blockly/javascript\";\nimport { pythonGenerator, Order } from \"blockly/python\"\n\n\nBlockly.Blocks[\"move\"] = {\n  init: function() {\n    this.appendDummyInput(\"direction\")\n    \t.appendField(\"direction\")\n    \t.appendField(new Blockly.FieldDropdown([[\"up\",\"up\"],[\"down\",\"down\"]]),\"direction_value\");\n    this.appendDummyInput(\"distance\")\n    \t.appendField(\"distance\")\n    \t.appendField(new Blockly.FieldNumber(0),\"distance_value\");\n    this.appendDummyInput(\"distance\")\n    \t.appendField(\"time\")\n    \t.appendField(new Blockly.FieldNumber(0),\"time_value\");\n    this.setPreviousStatement(true,null);\n    this.setNextStatement(true,null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Blocks[\"rotate\"] = {\n  init: function() {\n    this.appendDummyInput(\"angle\")\n    \t.appendField(\"angle\")\n    \t.appendField(new Blockly.FieldAngle(0),\"angle_value\")\n    this.setPreviousStatement(true,null);\n    this.setNextStatement(true,null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\n\npythonGenerator.forBlock[\"move\"] = function (block, generator) {\n  var value_time = block.getFieldValue('time_value');\n  var value_direction = block.getFieldValue('direction_value');\n  var value_distance = block.getFieldValue('distance_value');\n  var code = 'robot.move( Direction: ' + value_direction + ', Distance: ' + value_distance + ', Time: ' + value_time + ');\\n';\n  return code;\n};\npythonGenerator.forBlock[\"rotate\"] = function (block, generator) {\n  var value_angle = block.getFieldValue('angle_value');\n  var code = 'robot.rotate( Angel: ' + value_angle + ');\\n';\n  return code;\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B;AACA,SAASC,eAAe,EAAEC,KAAK,QAAQ,gBAAgB;AAGvDF,OAAO,CAACG,MAAM,CAAC,MAAM,CAAC,GAAG;EACvBC,IAAI,EAAE,SAAAA,CAAA,EAAW;IACf,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC,CAChCC,WAAW,CAAC,WAAW,CAAC,CACxBA,WAAW,CAAC,IAAIN,OAAO,CAACO,aAAa,CAAC,CAAC,CAAC,IAAI,EAAC,IAAI,CAAC,EAAC,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC,CAAC,EAAC,iBAAiB,CAAC;IACzF,IAAI,CAACF,gBAAgB,CAAC,UAAU,CAAC,CAC/BC,WAAW,CAAC,UAAU,CAAC,CACvBA,WAAW,CAAC,IAAIN,OAAO,CAACQ,WAAW,CAAC,CAAC,CAAC,EAAC,gBAAgB,CAAC;IAC1D,IAAI,CAACH,gBAAgB,CAAC,UAAU,CAAC,CAC/BC,WAAW,CAAC,MAAM,CAAC,CACnBA,WAAW,CAAC,IAAIN,OAAO,CAACQ,WAAW,CAAC,CAAC,CAAC,EAAC,YAAY,CAAC;IACtD,IAAI,CAACC,oBAAoB,CAAC,IAAI,EAAC,IAAI,CAAC;IACpC,IAAI,CAACC,gBAAgB,CAAC,IAAI,EAAC,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;EACrB;AACF,CAAC;AACDb,OAAO,CAACG,MAAM,CAAC,QAAQ,CAAC,GAAG;EACzBC,IAAI,EAAE,SAAAA,CAAA,EAAW;IACf,IAAI,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAC5BC,WAAW,CAAC,OAAO,CAAC,CACpBA,WAAW,CAAC,IAAIN,OAAO,CAACc,UAAU,CAAC,CAAC,CAAC,EAAC,aAAa,CAAC;IACtD,IAAI,CAACL,oBAAoB,CAAC,IAAI,EAAC,IAAI,CAAC;IACpC,IAAI,CAACC,gBAAgB,CAAC,IAAI,EAAC,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;EACrB;AACF,CAAC;AAEDZ,eAAe,CAACc,QAAQ,CAAC,MAAM,CAAC,GAAG,UAAUC,KAAK,EAAEC,SAAS,EAAE;EAC7D,IAAIC,UAAU,GAAGF,KAAK,CAACG,aAAa,CAAC,YAAY,CAAC;EAClD,IAAIC,eAAe,GAAGJ,KAAK,CAACG,aAAa,CAAC,iBAAiB,CAAC;EAC5D,IAAIE,cAAc,GAAGL,KAAK,CAACG,aAAa,CAAC,gBAAgB,CAAC;EAC1D,IAAIG,IAAI,GAAG,yBAAyB,GAAGF,eAAe,GAAG,cAAc,GAAGC,cAAc,GAAG,UAAU,GAAGH,UAAU,GAAG,MAAM;EAC3H,OAAOI,IAAI;AACb,CAAC;AACDrB,eAAe,CAACc,QAAQ,CAAC,QAAQ,CAAC,GAAG,UAAUC,KAAK,EAAEC,SAAS,EAAE;EAC/D,IAAIM,WAAW,GAAGP,KAAK,CAACG,aAAa,CAAC,aAAa,CAAC;EACpD,IAAIG,IAAI,GAAG,uBAAuB,GAAGC,WAAW,GAAG,MAAM;EACzD,OAAOD,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}