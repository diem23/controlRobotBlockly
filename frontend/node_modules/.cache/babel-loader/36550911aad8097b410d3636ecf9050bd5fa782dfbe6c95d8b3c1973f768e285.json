{"ast":null,"code":"import Blockly from \"blockly\";\n//import { javascriptGenerator, Order } from \"blockly/javascript\";\nimport { pythonGenerator, Order } from \"blockly/python\";\nBlockly.Blocks[\"move\"] = {\n  init: function () {\n    this.appendDummyInput(\"direction\").appendField(\"direction\").appendField(new Blockly.FieldDropdown([[\"up\", \"up\"], [\"down\", \"down\"], [\"left\", \"left\"], [\"right\", \"right\"]]), \"direction_value\");\n    this.appendDummyInput(\"distance\").appendField(\"distance\").appendField(new Blockly.FieldNumber(0), \"distance_value\");\n    // this.appendDummyInput(\"distance\")\n    // \t.appendField(\"time\")\n    // \t.appendField(new Blockly.FieldNumber(0),\"time_value\");\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\n// Blockly.Blocks[\"rotate\"] = {\n//   init: function() {\n//     this.appendDummyInput(\"angle\")\n//     \t.appendField(\"angle\")\n//     \t.appendField(new Blockly.FieldAngle(0),\"angle_value\")\n//     this.setPreviousStatement(true,null);\n//     this.setNextStatement(true,null);\n//     this.setColour(250);\n//     this.setTooltip('');\n//     this.setHelpUrl('');\n//   }\n// };\n\npythonGenerator.forBlock[\"move\"] = function (block, generator) {\n  var value_time = block.getFieldValue('time_value');\n  var value_direction = block.getFieldValue('direction_value');\n  var value_distance = block.getFieldValue('distance_value');\n  var code = '{\"move\":{\"direction\":\"' + value_direction + '\",\"distance\":' + value_distance + '}} ';\n  return code;\n};\n// pythonGenerator.forBlock[\"rotate\"] = function (block, generator) {\n//   var value_angle = block.getFieldValue('angle_value');\n//   var code = 'robot.rotate( Angel: ' + value_angle + ');\\n';\n//   return code;\n// };","map":{"version":3,"names":["Blockly","pythonGenerator","Order","Blocks","init","appendDummyInput","appendField","FieldDropdown","FieldNumber","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","forBlock","block","generator","value_time","getFieldValue","value_direction","value_distance","code"],"sources":["/home/tuan/controlRobotBlockly/frontend/src/customBlocks/custom_Blocks.js"],"sourcesContent":["import Blockly from \"blockly\";\n//import { javascriptGenerator, Order } from \"blockly/javascript\";\nimport { pythonGenerator, Order } from \"blockly/python\"\n\n\nBlockly.Blocks[\"move\"] = {\n  init: function() {\n    this.appendDummyInput(\"direction\")\n    \t.appendField(\"direction\")\n    \t.appendField(new Blockly.FieldDropdown([[\"up\",\"up\"],[\"down\",\"down\"],[\"left\",\"left\"],[\"right\",\"right\"]]),\"direction_value\");\n    this.appendDummyInput(\"distance\")\n    \t.appendField(\"distance\")\n    \t.appendField(new Blockly.FieldNumber(0),\"distance_value\");\n    // this.appendDummyInput(\"distance\")\n    // \t.appendField(\"time\")\n    // \t.appendField(new Blockly.FieldNumber(0),\"time_value\");\n    this.setPreviousStatement(true,null);\n    this.setNextStatement(true,null);\n    this.setColour(250);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\n// Blockly.Blocks[\"rotate\"] = {\n//   init: function() {\n//     this.appendDummyInput(\"angle\")\n//     \t.appendField(\"angle\")\n//     \t.appendField(new Blockly.FieldAngle(0),\"angle_value\")\n//     this.setPreviousStatement(true,null);\n//     this.setNextStatement(true,null);\n//     this.setColour(250);\n//     this.setTooltip('');\n//     this.setHelpUrl('');\n//   }\n// };\n\npythonGenerator.forBlock[\"move\"] = function (block, generator) {\n  var value_time = block.getFieldValue('time_value');\n  var value_direction = block.getFieldValue('direction_value');\n  var value_distance = block.getFieldValue('distance_value');\n  var code = '{\"move\":{\"direction\":\"' + value_direction + '\",\"distance\":' + value_distance +'}} ';\n  return code;\n};\n// pythonGenerator.forBlock[\"rotate\"] = function (block, generator) {\n//   var value_angle = block.getFieldValue('angle_value');\n//   var code = 'robot.rotate( Angel: ' + value_angle + ');\\n';\n//   return code;\n// };\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B;AACA,SAASC,eAAe,EAAEC,KAAK,QAAQ,gBAAgB;AAGvDF,OAAO,CAACG,MAAM,CAAC,MAAM,CAAC,GAAG;EACvBC,IAAI,EAAE,SAAAA,CAAA,EAAW;IACf,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC,CAChCC,WAAW,CAAC,WAAW,CAAC,CACxBA,WAAW,CAAC,IAAIN,OAAO,CAACO,aAAa,CAAC,CAAC,CAAC,IAAI,EAAC,IAAI,CAAC,EAAC,CAAC,MAAM,EAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAC,MAAM,CAAC,EAAC,CAAC,OAAO,EAAC,OAAO,CAAC,CAAC,CAAC,EAAC,iBAAiB,CAAC;IAC3H,IAAI,CAACF,gBAAgB,CAAC,UAAU,CAAC,CAC/BC,WAAW,CAAC,UAAU,CAAC,CACvBA,WAAW,CAAC,IAAIN,OAAO,CAACQ,WAAW,CAAC,CAAC,CAAC,EAAC,gBAAgB,CAAC;IAC1D;IACA;IACA;IACA,IAAI,CAACC,oBAAoB,CAAC,IAAI,EAAC,IAAI,CAAC;IACpC,IAAI,CAACC,gBAAgB,CAAC,IAAI,EAAC,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;IACnB,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC;EACrB;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,eAAe,CAACa,QAAQ,CAAC,MAAM,CAAC,GAAG,UAAUC,KAAK,EAAEC,SAAS,EAAE;EAC7D,IAAIC,UAAU,GAAGF,KAAK,CAACG,aAAa,CAAC,YAAY,CAAC;EAClD,IAAIC,eAAe,GAAGJ,KAAK,CAACG,aAAa,CAAC,iBAAiB,CAAC;EAC5D,IAAIE,cAAc,GAAGL,KAAK,CAACG,aAAa,CAAC,gBAAgB,CAAC;EAC1D,IAAIG,IAAI,GAAG,wBAAwB,GAAGF,eAAe,GAAG,eAAe,GAAGC,cAAc,GAAE,KAAK;EAC/F,OAAOC,IAAI;AACb,CAAC;AACD;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}