{"ast":null,"code":"var _jsxFileName = \"/home/minhdiem/testReactBach/RobotControl/src/App.js\";\nimport \"./customBlocks/custom_Blocks\";\nimport Blockly from \"blockly\";\nimport { pythonGenerator } from \"blockly/python\";\nimport { BlocklyWorkspace } from \"react-blockly\";\nimport { PureComponent } from \"react\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialXml = '<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>';\nconst toolbox = {\n  kind: \"categoryToolbox\",\n  contents: [\n  /*{\n    kind: \"category\",\n    name: \"Logic\",\n    colour: \"#5b80a5\",\n    contents: [\n      {\n        kind: \"block\",\n        type: \"controls_if\"\n      },\n      {\n        kind: \"block\",\n        type: \"logic_compare\",\n        fields: {\n          OP: \"EQ\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"logic_operation\",\n        fields: {\n          OP: \"AND\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"logic_negate\"\n      },\n      {\n        kind: \"block\",\n        type: \"logic_boolean\",\n        fields: {\n          BOOL: \"TRUE\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"logic_null\"\n      },\n      {\n        kind: \"block\",\n        type: \"logic_ternary\"\n      }\n    ]\n  },\n  {\n    kind: \"category\",\n    name: \"Loops\",\n    colour: \"#5ba55b\",\n    contents: [\n      {\n        kind: \"block\",\n        type: \"controls_repeat_ext\",\n        values: {\n          TIMES: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"10\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"controls_whileUntil\",\n        fields: {\n          MODE: \"WHILE\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"controls_for\",\n        fields: {\n          VAR: {\n            id: \"XECl4GVs-^+[?1V:UI%Z\",\n            name: \"i\"\n          }\n        },\n        values: {\n          FROM: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          },\n          TO: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"10\"\n            }\n          },\n          BY: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"controls_forEach\",\n        fields: {\n          VAR: {\n            id: \"zbX-3A%GYRcl`Ngw=KCn\",\n            name: \"j\"\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"controls_flow_statements\",\n        fields: {\n          FLOW: \"BREAK\"\n        }\n      }\n    ]\n  },\n  {\n    kind: \"category\",\n    name: \"Math\",\n    colour: \"#5b67a5\",\n    contents: [\n      {\n        kind: \"block\",\n        type: \"math_number\",\n        fields: {\n          NUM: \"0\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_arithmetic\",\n        fields: {\n          OP: \"ADD\"\n        },\n        values: {\n          A: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          },\n          B: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_single\",\n        fields: {\n          OP: \"ROOT\"\n        },\n        values: {\n          NUM: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"9\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_trig\",\n        fields: {\n          OP: \"SIN\"\n        },\n        values: {\n          NUM: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"45\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_constant\",\n        fields: {\n          CONSTANT: \"PI\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_number_property\",\n        fields: {\n          PROPERTY: \"EVEN\"\n        },\n        values: {\n          NUMBER_TO_CHECK: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"0\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_round\",\n        fields: {\n          OP: \"ROUND\"\n        },\n        values: {\n          NUM: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"3.1\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_on_list\",\n        mutation: {\n          op: \"SUM\"\n        },\n        fields: {\n          OP: \"SUM\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_modulo\",\n        values: {\n          DIVIDEND: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"64\"\n            }\n          },\n          DIVISOR: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"10\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_constrain\",\n        values: {\n          VALUE: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"50\"\n            }\n          },\n          LOW: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          },\n          HIGH: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"100\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_random_int\",\n        values: {\n          FROM: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"1\"\n            }\n          },\n          TO: {\n            kind: \"block\",\n            type: \"math_number\",\n            fields: {\n              NUM: \"100\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"math_random_float\"\n      }\n    ]\n  },\n  {\n    kind: \"category\",\n    name: \"Text\",\n    colour: \"#5ba58c\",\n    contents: [\n      {\n        kind: \"block\",\n        type: \"text\",\n        fields: {\n          TEXT: \"\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_join\",\n        mutation: {\n          items: \"2\"\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_append\",\n        fields: {\n          VAR: {\n            id: \"7j+{(eU@3Nf`G7G@/J%}\",\n            name: \"item\"\n          }\n        },\n        values: {\n          TEXT: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_length\",\n        values: {\n          VALUE: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_isEmpty\",\n        values: {\n          VALUE: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_indexOf\",\n        fields: {\n          END: \"FIRST\"\n        },\n        values: {\n          VALUE: {\n            kind: \"block\",\n            type: \"variables_get\",\n            fields: {\n              VAR: {\n                id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                name: \"text\"\n              }\n            }\n          },\n          FIND: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_charAt\",\n        mutation: {\n          at: \"true\"\n        },\n        fields: {\n          WHERE: \"FROM_START\"\n        },\n        values: {\n          VALUE: {\n            kind: \"block\",\n            type: \"variables_get\",\n            fields: {\n              VAR: {\n                id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                name: \"text\"\n              }\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_getSubstring\",\n        mutation: {\n          at1: \"true\",\n          at2: \"true\"\n        },\n        fields: {\n          WHERE1: \"FROM_START\",\n          WHERE2: \"FROM_START\"\n        },\n        values: {\n          STRING: {\n            kind: \"block\",\n            type: \"variables_get\",\n            fields: {\n              VAR: {\n                id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                name: \"text\"\n              }\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_changeCase\",\n        fields: {\n          CASE: \"UPPERCASE\"\n        },\n        values: {\n          TEXT: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_trim\",\n        fields: {\n          MODE: \"BOTH\"\n        },\n        values: {\n          TEXT: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_print\",\n        values: {\n          TEXT: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      },\n      {\n        kind: \"block\",\n        type: \"text_prompt_ext\",\n        mutation: {\n          type: \"TEXT\"\n        },\n        fields: {\n          TYPE: \"TEXT\"\n        },\n        values: {\n          TEXT: {\n            kind: \"block\",\n            type: \"text\",\n            fields: {\n              TEXT: \"abc\"\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    kind: \"sep\"\n  },\n  {\n    kind: \"category\",\n    name: \"Variables\",\n    colour: \"#a55b80\",\n    custom: \"VARIABLE\"\n  },\n  {\n    kind: \"category\",\n    name: \"Functions\",\n    colour: \"#995ba5\",\n    custom: \"PROCEDURE\"\n  },\n  {\n    kind: \"sep\"\n  },*/\n  {\n    kind: \"category\",\n    name: \"Move\",\n    colour: \"#3A81A3\",\n    contents: [{\n      kind: \"block\",\n      type: \"move\"\n    }]\n  }, {\n    kind: \"sep\"\n  }, {\n    kind: \"category\",\n    name: \"Rotate\",\n    colour: \"#39A1A3\",\n    contents: [{\n      kind: \"block\",\n      type: \"rotate\"\n    }]\n  }]\n};\nfunction sendDataToBackend(data) {\n  //chuyển đổi dữ liệu thành JSON\n  const jsonData = JSON.stringify(data);\n\n  // Tạo một yêu cầu Fetch\n  fetch('sqlalchemy.url', {\n    //thay url backend vào\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: jsonData\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json(); // Phân tích phản hồi JSON nếu cần\n  }).then(data => {\n    console.log('Data sent successfully:', data);\n    //Xử lý phản hồi từ backend (nếu cần)\n  }).catch(error => {\n    console.error('There was a problem with your fetch operation:', error);\n  });\n}\nclass BlocklyComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleGenerateJSCode = () => {\n      //const jsCode = javascriptGenerator.workspaceToCode();\n      const pythonCode = pythonGenerator.workspaceToCode();\n      this.setState({\n        pythonCode\n      });\n      sendDataToBackend(pythonCode);\n      console.log(pythonCode);\n      console.log(this.state.xml);\n    };\n    this.handleXmlChange = xml => {\n      this.setState({\n        xml\n      });\n    };\n    this.handleWorkspaceChange = workspace => {\n      //const jsCode = Blockly.JavaScript.workspaceToCode(workspace);\n      const pythonCode = Blockly.Python.workspaceToCode(workspace);\n      this.state({\n        pythonCode\n      });\n    };\n    this.state = {\n      xml: \"\",\n      pythonCode: \"\"\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React Blockly\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlocklyWorkspace, {\n        className: \"blockly_container\",\n        initialXml: initialXml,\n        toolboxConfiguration: toolbox,\n        workspaceConfiguration: {\n          grid: {\n            spacing: 20,\n            length: 5,\n            colour: \"#ccc\",\n            snap: true\n          }\n        },\n        onXmlChange: this.handleXmlChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleGenerateJSCode,\n        children: \"Generate Python Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.pythonCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default BlocklyComponent;","map":{"version":3,"names":["Blockly","pythonGenerator","BlocklyWorkspace","PureComponent","React","useState","jsxDEV","_jsxDEV","initialXml","toolbox","kind","contents","name","colour","type","sendDataToBackend","data","jsonData","JSON","stringify","fetch","method","headers","body","then","response","ok","Error","json","console","log","catch","error","BlocklyComponent","constructor","props","handleGenerateJSCode","pythonCode","workspaceToCode","setState","state","xml","handleXmlChange","handleWorkspaceChange","workspace","Python","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toolboxConfiguration","workspaceConfiguration","grid","spacing","length","snap","onXmlChange","onClick"],"sources":["/home/minhdiem/testReactBach/RobotControl/src/App.js"],"sourcesContent":["import \"./customBlocks/custom_Blocks\";\nimport Blockly from \"blockly\";\nimport { pythonGenerator } from \"blockly/python\"\nimport { BlocklyWorkspace } from \"react-blockly\";\nimport { PureComponent } from \"react\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst initialXml = '<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>';\nconst toolbox = {\n  kind: \"categoryToolbox\",\n  contents: [\n    /*{\n      kind: \"category\",\n      name: \"Logic\",\n      colour: \"#5b80a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n          fields: {\n            OP: \"EQ\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n          fields: {\n            OP: \"AND\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_boolean\",\n          fields: {\n            BOOL: \"TRUE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_null\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_ternary\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Loops\",\n      colour: \"#5ba55b\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          values: {\n            TIMES: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n          fields: {\n            MODE: \"WHILE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: {\n              id: \"XECl4GVs-^+[?1V:UI%Z\",\n              name: \"i\"\n            }\n          },\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            },\n            BY: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_forEach\",\n          fields: {\n            VAR: {\n              id: \"zbX-3A%GYRcl`Ngw=KCn\",\n              name: \"j\"\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_flow_statements\",\n          fields: {\n            FLOW: \"BREAK\"\n          }\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Math\",\n      colour: \"#5b67a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: {\n            NUM: \"0\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\"\n          },\n          values: {\n            A: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            B: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_single\",\n          fields: {\n            OP: \"ROOT\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"9\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_trig\",\n          fields: {\n            OP: \"SIN\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"45\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constant\",\n          fields: {\n            CONSTANT: \"PI\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_number_property\",\n          fields: {\n            PROPERTY: \"EVEN\"\n          },\n          values: {\n            NUMBER_TO_CHECK: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"0\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_round\",\n          fields: {\n            OP: \"ROUND\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"3.1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_on_list\",\n          mutation: {\n            op: \"SUM\"\n          },\n          fields: {\n            OP: \"SUM\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_modulo\",\n          values: {\n            DIVIDEND: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"64\"\n              }\n            },\n            DIVISOR: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constrain\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"50\"\n              }\n            },\n            LOW: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            HIGH: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_int\",\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_float\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Text\",\n      colour: \"#5ba58c\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"text\",\n          fields: {\n            TEXT: \"\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_join\",\n          mutation: {\n            items: \"2\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_append\",\n          fields: {\n            VAR: {\n              id: \"7j+{(eU@3Nf`G7G@/J%}\",\n              name: \"item\"\n            }\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_length\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_isEmpty\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_indexOf\",\n          fields: {\n            END: \"FIRST\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            },\n            FIND: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_charAt\",\n          mutation: {\n            at: \"true\"\n          },\n          fields: {\n            WHERE: \"FROM_START\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_getSubstring\",\n          mutation: {\n            at1: \"true\",\n            at2: \"true\"\n          },\n          fields: {\n            WHERE1: \"FROM_START\",\n            WHERE2: \"FROM_START\"\n          },\n          values: {\n            STRING: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_changeCase\",\n          fields: {\n            CASE: \"UPPERCASE\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_trim\",\n          fields: {\n            MODE: \"BOTH\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_print\",\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_prompt_ext\",\n          mutation: {\n            type: \"TEXT\"\n          },\n          fields: {\n            TYPE: \"TEXT\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      kind: \"sep\"\n    },\n    {\n      kind: \"category\",\n      name: \"Variables\",\n      colour: \"#a55b80\",\n      custom: \"VARIABLE\"\n    },\n    {\n      kind: \"category\",\n      name: \"Functions\",\n      colour: \"#995ba5\",\n      custom: \"PROCEDURE\"\n    },\n    {\n      kind: \"sep\"\n    },*/ \n    { \n      kind: \"category\",\n      name: \"Move\",\n      colour: \"#3A81A3\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"move\"\n        },\n        \n      ]\n    },\n    {\n      kind: \"sep\"\n    }, \n    { \n      kind: \"category\",\n      name: \"Rotate\",\n      colour: \"#39A1A3\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"rotate\"\n        },\n        \n      ]\n    },\n  ]\n};\n\nfunction sendDataToBackend(data) {\n\n    //chuyển đổi dữ liệu thành JSON\n    const jsonData = JSON.stringify(data);\n    \n    // Tạo một yêu cầu Fetch\n    fetch('sqlalchemy.url' , { //thay url backend vào\n      method: 'POST' ,\n      headers: {\n       'Content-Type': 'application/json'\n      },\n      body: jsonData\n    })\n    .then(response => {\n     if(!response.ok) {\n      throw new Error('Network response was not ok');\n     }\n     return response.json(); // Phân tích phản hồi JSON nếu cần\n    })\n    .then(data => {\n     console.log('Data sent successfully:', data);\n     //Xử lý phản hồi từ backend (nếu cần)\n     })\n     .catch(error => {\n       console.error('There was a problem with your fetch operation:', error);\n     });  \n}\n\nclass BlocklyComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xml: \"\",\n      pythonCode: \"\"\n    };\n  }\n\n  handleGenerateJSCode = () => {\n    //const jsCode = javascriptGenerator.workspaceToCode();\n    const pythonCode = pythonGenerator.workspaceToCode();\n    \n    this.setState({ pythonCode });\n    \n    sendDataToBackend(pythonCode);\n    \n    \n    console.log(pythonCode);\n    console.log(this.state.xml);\n    \n    \n  };\n\n  handleXmlChange = (xml) => {\n    this.setState({ xml });\n  };\n\n  handleWorkspaceChange = (workspace) => {\n    //const jsCode = Blockly.JavaScript.workspaceToCode(workspace);\n    const pythonCode = Blockly.Python.workspaceToCode(workspace);\n    this.state({ pythonCode });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>React Blockly</h1>\n        \n        <BlocklyWorkspace\n          className=\"blockly_container\"\n          initialXml={initialXml}\n          toolboxConfiguration={toolbox}\n          workspaceConfiguration={{\n            grid: {\n              spacing: 20,\n              length: 5,\n              colour: \"#ccc\",\n              snap: true\n            }\n          }}\n          onXmlChange={this.handleXmlChange}\n        />\n        <button onClick={this.handleGenerateJSCode} >Generate Python Code</button>\n        <div>{this.state.pythonCode}</div>\n        \n      </div>\n    );\n  }\n}\n\nexport default BlocklyComponent;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}